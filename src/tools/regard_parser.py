import json
import time
import urllib.parse
from typing import Annotated, Any

from langchain.tools import tool
from playwright.sync_api import sync_playwright
from pydantic import BaseModel, Field


class CPU(BaseModel):
    cpu: Annotated[str, Field(description="–ú–æ–¥–µ–ª—å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞", example="Intel Core i7-12700")]


class GPU(BaseModel):
    gpu: Annotated[str, Field(description="–ú–æ–¥–µ–ª—å –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã", example="GeForce RTX 3070")]


class Memory(BaseModel):
    name: Annotated[str, Field(description="–ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏", example="Corsair Vengeance 16 GB")]


class Corpus(BaseModel):
    name: Annotated[str, Field(description="–ú–æ–¥–µ–ª—å –∫–æ—Ä–ø—É—Å–∞", example="Cooler Master MasterBox")]


class PowerSupply(BaseModel):
    name: Annotated[
        str, Field(description="–ú–æ–¥–µ–ª—å –±–ª–æ–∫–∞ –ø–∏—Ç–∞–Ω–∏—è", example="Be Quiet! Pure Power 11 600W")
    ]


class Motherboard(BaseModel):
    name: Annotated[
        str, Field(description="–ú–æ–¥–µ–ª—å –º–∞—Ç–µ—Ä–∏–Ω—Å–∫–æ–π –ø–ª–∞—Ç—ã", example="ASUS ROG Strix Z690-F")
    ]


Component = CPU | GPU | Memory | Corpus | PowerSupply | Motherboard


class ComponentInput(BaseModel):
    components: Annotated[
        list[Component],
        Field(
            description="–°–ø–∏—Å–æ–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.",
            example=[{"cpu": "Intel Core i7-12700"}, {"gpu": "GeForce RTX 3070"}],
        ),
    ]


class RegardInput(BaseModel):
    input_data: ComponentInput

    @classmethod
    def from_dict(cls, input_data: dict[str, Any]) -> "RegardInput":
        """–ú–µ—Ç–æ–¥ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å–ª–æ–≤–∞—Ä—è –≤ –æ–±—ä–µ–∫—Ç `RegardInput`"""
        return cls(input_data=ComponentInput(**input_data))


def parse_first_product(page) -> dict[str, Any] | None:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–µ—Ä–≤–æ–º —Ç–æ–≤–∞—Ä–µ."""
    try:
        page.wait_for_selector(".CardText_link__C_fPZ", timeout=15000)

        name_element = page.query_selector(".CardText_title__7bSbO.CardText_listing__6mqXC")
        name = name_element.inner_text() if name_element else "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"

        price_element = page.query_selector(".CardPrice_price__YFA2m .Price_price__m2aSe")
        price = (
            float(price_element.inner_text().replace("\xa0", "").replace("‚ÇΩ", "").strip())
            if price_element
            else "–¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        )

        link_element = page.query_selector(".CardText_link__C_fPZ")
        link = (
            "https://www.regard.ru" + (link_element.get_attribute("href")) if link_element else "#"
        )

        return {"name": name, "price": price, "link": link}
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ–≤–∞—Ä–∞: {str(e)}")
        return None


def apply_sorting(page, sort_text: str) -> dict[str, Any] | None:
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä."""
    try:
        print(f"\n–ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É: {sort_text}")

        sort_button = page.wait_for_selector(".SelectableList_wrap__uvkMK")
        sort_button.click()

        option = page.wait_for_selector(f"//span[text()='{sort_text}']")
        option.click()

        page.wait_for_selector(".CardText_link__C_fPZ")
        time.sleep(2)

        return parse_first_product(page)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ: {str(e)}")
        return None


@tool(args_schema=RegardInput)
def regard_parser_tool(input_data: dict[str, Any]) -> str:
    """–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å regard.ru."""

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º Pydantic –º–æ–¥–µ–ª—å –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º
    try:
        regard_input = RegardInput(input_data=ComponentInput(**input_data))
        components_to_parse = regard_input.input_data.components
    except Exception as e:  # –ó–∞–º–µ–Ω–∏–ª ValidationError –Ω–∞ –æ–±—â–∏–π Exception –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        return json.dumps(
            {"error": f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}"}, ensure_ascii=False, indent=2
        )

    print(f"–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {components_to_parse}")

    results = {}

    with sync_playwright() as p:
        browser = p.chromium.launch(headless=False)
        page = browser.new_page()
        try:
            for component_model in components_to_parse:  # –ò–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏–∑–º–µ–Ω–µ–Ω–æ –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
                search_query = None
                component_type_key = None

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞
                if isinstance(component_model, CPU):
                    search_query = component_model.cpu
                    component_type_key = "cpu"
                elif isinstance(component_model, GPU):
                    search_query = component_model.gpu
                    component_type_key = "gpu"
                elif isinstance(component_model, Memory | Corpus | PowerSupply | Motherboard):
                    search_query = component_model.name
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –∫–ª–∞—Å—Å–∞ –º–æ–¥–µ–ª–∏ –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è –∫–ª—é—á–∞
                    component_type_key = type(component_model).__name__.lower()

                if not search_query:
                    print(
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞: {component_model}"
                    )
                    continue

                print(f"üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ {component_type_key}: {search_query}")

                encoded_query = urllib.parse.quote_plus(search_query)
                search_url = f"https://www.regard.ru/catalog?search={encoded_query}"
                print(f"–û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É: {search_url}")
                page.goto(search_url, wait_until="domcontentloaded")

                sort_options = ["–°–Ω–∞—á–∞–ª–∞ —Å –Ω–∏–∑–∫–æ–π —Ü–µ–Ω–æ–π", "–°–Ω–∞—á–∞–ª–∞ –¥–æ—Ä–æ–≥–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ"]

                component_results = []
                for sort_type in sort_options:
                    try:
                        product_info = apply_sorting(page, sort_type)
                        if product_info:
                            component_results.append(
                                {
                                    "sort_type": sort_type,
                                    "name": product_info["name"],
                                    "price": product_info["price"],
                                    "link": product_info["link"],
                                }
                            )
                        time.sleep(2)
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {sort_type}: {str(e)}")
                        continue
                results[search_query] = component_results
        finally:
            browser.close()

    return json.dumps(results, ensure_ascii=False, indent=2)


def main():
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –¥–ª—è RegardInput
    sample_input_data = {
        "input_data": {
            "components": [
                {"cpu": "Intel Core i7-12700"},
                {"gpu": "GeForce RTX 3070"},
                {"name": "Kingston FURY Beast Black 16 –ì–ë"},  # –ü—Ä–∏–º–µ—Ä –¥–ª—è –ø–∞–º—è—Ç–∏
            ]
        }
    }
    output = regard_parser_tool.invoke(sample_input_data)
    print(output)


if __name__ == "__main__":
    main()
